[{"prolog_results_raw":"[[simple_past_form_error,S,node2,VERB,node6]]","deps":[{"governor":"0","deptype":"root","dependent":"2"},{"governor":"2","deptype":"nsubj","dependent":"1"},{"deptype":"advmod","governor":"2","dependent":"3"},{"dependent":"4","governor":"2","deptype":"punct"}],"id":"1","nodes":[{"node_type":"ROOT","depth":"1","node_id":"1","last_token_id":"4","node_function":"","parent":0,"text":"She is here .","token":"0","first_token_id":"1"},{"node_function":"","parent":"1","text":"She is here .","first_token_id":"1","token":"0","node_type":"S","depth":"2","node_id":"2","last_token_id":"4"},{"text":"She","first_token_id":"1","token":"0","parent":"2","node_function":"","last_token_id":"1","node_type":"NP","depth":"3","node_id":"3"},{"node_id":"4","depth":"4","node_type":"PRP","offset1":2,"last_token_id":1,"offset0":0,"final_label":"S","first_token_id":1,"token":"She","text":"She","token_id":"1","node_function":"","parent":"3","lemma":"she"},{"node_id":"5","node_type":"VP","depth":"3","last_token_id":"3","node_function":"","parent":"2","first_token_id":"2","token":"0","text":"is here"},{"lemma":"be","node_function":"","token_id":"2","parent":"5","text":"is","token":"is","first_token_id":2,"final_label":"VERB","offset0":4,"last_token_id":2,"offset1":5,"depth":"4","node_type":"VBZ","node_id":"6"},{"text":"here","token":"0","first_token_id":"3","node_function":"","parent":"5","depth":"4","node_type":"ADVP","node_id":"7","last_token_id":"3"},{"offset0":7,"last_token_id":3,"final_label":"S","depth":"5","node_type":"RB","node_id":"8","offset1":10,"lemma":"here","text":"here","first_token_id":3,"token":"here","node_function":"","token_id":"3","parent":"7"},{"first_token_id":4,"token":".","text":".","parent":"2","token_id":"4","node_function":"","lemma":".","node_id":"9","node_type":".","depth":"3","offset1":11,"last_token_id":4,"offset0":11,"final_label":"S"}],"debug_annotations":{"S":"She <...> here . ","VERB":"is "},"xml":"<sentence id=\"1\"> <tokens> <token id=\"1\"> <word>She</word> <lemma>she</lemma> <CharacterOffsetBegin>0</CharacterOffsetBegin> <CharacterOffsetEnd>3</CharacterOffsetEnd> <POS>PRP</POS> </token> <token id=\"2\"> <word>is</word> <lemma>be</lemma> <CharacterOffsetBegin>4</CharacterOffsetBegin> <CharacterOffsetEnd>6</CharacterOffsetEnd> <POS>VBZ</POS> </token> <token id=\"3\"> <word>here</word> <lemma>here</lemma> <CharacterOffsetBegin>7</CharacterOffsetBegin> <CharacterOffsetEnd>11</CharacterOffsetEnd> <POS>RB</POS> </token> <token id=\"4\"> <word>.</word> <lemma>.</lemma> <CharacterOffsetBegin>11</CharacterOffsetBegin> <CharacterOffsetEnd>12</CharacterOffsetEnd> <POS>.</POS> </token> </tokens> <parse>(ROOT (S (NP (PRP She)) (VP (VBZ is) (ADVP (RB here))) (. .))) </parse> <dependencies type=\"basic-dependencies\"> <dep type=\"root\"> <governor idx=\"0\">ROOT</governor> <dependent idx=\"2\">is</dependent> </dep> <dep type=\"nsubj\"> <governor idx=\"2\">is</governor> <dependent idx=\"1\">She</dependent> </dep> <dep type=\"advmod\"> <governor idx=\"2\">is</governor> <dependent idx=\"3\">here</dependent> </dep> <dep type=\"punct\"> <governor idx=\"2\">is</governor> <dependent idx=\"4\">.</dependent> </dep> </dependencies> <dependencies type=\"collapsed-dependencies\"> <dep type=\"root\"> <governor idx=\"0\">ROOT</governor> <dependent idx=\"2\">is</dependent> </dep> <dep type=\"nsubj\"> <governor idx=\"2\">is</governor> <dependent idx=\"1\">She</dependent> </dep> <dep type=\"advmod\"> <governor idx=\"2\">is</governor> <dependent idx=\"3\">here</dependent> </dep> <dep type=\"punct\"> <governor idx=\"2\">is</governor> <dependent idx=\"4\">.</dependent> </dep> </dependencies> <dependencies type=\"collapsed-ccprocessed-dependencies\"> <dep type=\"root\"> <governor idx=\"0\">ROOT</governor> <dependent idx=\"2\">is</dependent> </dep> <dep type=\"nsubj\"> <governor idx=\"2\">is</governor> <dependent idx=\"1\">She</dependent> </dep> <dep type=\"advmod\"> <governor idx=\"2\">is</governor> <dependent idx=\"3\">here</dependent> </dep> <dep type=\"punct\"> <governor idx=\"2\">is</governor> <dependent idx=\"4\">.</dependent> </dep> </dependencies> </sentence>","prolog_results":[{"VERB":"node6","feature":"simple_past_form_error","S":"node2"}],"results":{"simple_past_form_error":[{"VERB":["6"],"S":["4","8","9"]}],"calc_features":{"simple_past_form_error":"1"}},"prolog":["simple_past_form_error(S, VERB) :- type(s, S), type(verb, VERB), \\+perl(identical_present_past_form_verbs, VERB), \\+dep(aux, VERB, _), \\+dep(aux, _, VERB), ancestor(S, VERB), \\+verbform(past, VERB, none, VERB), \\+( ( type(to, TO), type(vp, VP), parent(VP, VERB), immed_precedes(TO, VP) ) ), \\+( ( type(vp, VP1), type(vp, VP2), type(vbn, VBN), parent(VP1, VERB), parent(VP1, VP2), parent(VP2, VBN), immed_precedes(VERB, VP2) ) ), \\+( ( type(vp, VP1), type(vp, VP2), type(vbd, VBD), type(vbn, VERB), parent(VP1, VBD), parent(VP1, VP2), parent(VP2, VERB), immed_precedes(VBD, VP2) ) ), \\+( is_meridiem(VERB) ) .","is_meridiem(VERB) :- type(np, NP1), type(np, NP2), type(cd, CD), type(vp, VP), type(vbp, VERB), parent(NP1, NP2), parent(NP2, CD), parent(NP1, VP), parent(VP, VERB), ( text(am, VERB) | text(pm, VERB) ), immed_precedes(NP2, VP) .","regex(none,none).","perl(not_i,node1).","perl(not_am,node1).","perl(is_are,node1).","perl(not_is,node1).","perl(not_am_are,node1).","perl(not_has_have_had,node1).","perl(not_vbg,node1).","perl(not_i,node2).","perl(not_am,node2).","perl(is_are,node2).","perl(not_is,node2).","perl(not_am_are,node2).","perl(not_has_have_had,node2).","perl(not_vbg,node2).","perl(not_i,node3).","perl(not_am,node3).","perl(not_is,node3).","perl(not_am_are,node3).","perl(not_has_have_had,node3).","perl(not_vbg,node3).","perl(it_he_she,node4).","perl(not_i,node4).","perl(not_am,node4).","perl(not_is,node4).","perl(not_am_are,node4).","perl(not_has_have_had,node4).","perl(not_vbg,node4).","perl(not_i,node5).","perl(not_am,node5).","perl(is_are,node5).","perl(not_is,node5).","perl(not_am_are,node5).","perl(not_has_have_had,node5).","perl(not_vbg,node5).","perl(not_i,node6).","perl(not_am,node6).","perl(is_are,node6).","perl(am_is,node6).","perl(is,node6).","perl(not_am_are,node6).","perl(not_has_have_had,node6).","perl(not_vbg,node6).","perl(not_i,node7).","perl(not_am,node7).","perl(not_is,node7).","perl(not_am_are,node7).","perl(not_has_have_had,node7).","perl(not_vbg,node7).","perl(not_i,node8).","perl(not_am,node8).","perl(not_is,node8).","perl(not_am_are,node8).","perl(not_has_have_had,node8).","perl(not_vbg,node8).","perl(not_i,node9).","perl(not_am,node9).","perl(not_is,node9).","perl(not_am_are,node9).","perl(not_has_have_had,node9).","perl(not_vbg,node9).","perl(not_i,'1', node1).","perl(not_am,'1', node1).","perl(is_are,'1', node1).","perl(not_is,'1', node1).","perl(not_am_are,'1', node1).","perl(not_has_have_had,'1', node1).","perl(not_vbg,'1', node1).","perl(not_i,'1', node2).","perl(not_am,'1', node2).","perl(is_are,'1', node2).","perl(not_is,'1', node2).","perl(not_am_are,'1', node2).","perl(not_has_have_had,'1', node2).","perl(not_vbg,'1', node2).","perl(not_i,'1', node3).","perl(not_am,'1', node3).","perl(not_is,'1', node3).","perl(not_am_are,'1', node3).","perl(not_has_have_had,'1', node3).","perl(not_vbg,'1', node3).","perl(it_he_she,'1', node4).","perl(not_i,'1', node4).","perl(not_am,'1', node4).","perl(not_is,'1', node4).","perl(not_am_are,'1', node4).","perl(not_has_have_had,'1', node4).","perl(not_vbg,'1', node4).","perl(not_i,'1', node5).","perl(not_am,'1', node5).","perl(is_are,'1', node5).","perl(not_is,'1', node5).","perl(not_am_are,'1', node5).","perl(not_has_have_had,'1', node5).","perl(not_vbg,'1', node5).","perl(not_i,'1', node6).","perl(not_am,'1', node6).","perl(is_are,'1', node6).","perl(am_is,'1', node6).","perl(is,'1', node6).","perl(not_am_are,'1', node6).","perl(not_has_have_had,'1', node6).","perl(not_vbg,'1', node6).","perl(not_i,'1', node7).","perl(not_am,'1', node7).","perl(not_is,'1', node7).","perl(not_am_are,'1', node7).","perl(not_has_have_had,'1', node7).","perl(not_vbg,'1', node7).","perl(not_i,'1', node8).","perl(not_am,'1', node8).","perl(not_is,'1', node8).","perl(not_am_are,'1', node8).","perl(not_has_have_had,'1', node8).","perl(not_vbg,'1', node8).","perl(not_i,'1', node9).","perl(not_am,'1', node9).","perl(not_is,'1', node9).","perl(not_am_are,'1', node9).","perl(not_has_have_had,'1', node9).","perl(not_vbg,'1', node9).","dep(Dep, G, D) :- tknid(TG, G), tknid(TD, D), tdep(Dep, TG, TD).","depth(1, node1).","depth(2, node2).","depth(3, node3).","depth(3, node5).","depth(3, node9).","depth(4, node4).","depth(4, node6).","depth(4, node7).","depth(5, node8).","ftknid(1, node1).","ftknid(1, node2).","ftknid(1, node3).","ftknid(1, node4).","ftknid(2, node5).","ftknid(2, node6).","ftknid(3, node7).","ftknid(3, node8).","ftknid(4, node9).","lemma('.', node9).","lemma('be', node6).","lemma('here', node8).","lemma('she', node4).","ltknid(1, node3).","ltknid(1, node4).","ltknid(2, node6).","ltknid(3, node5).","ltknid(3, node7).","ltknid(3, node8).","ltknid(4, node1).","ltknid(4, node2).","ltknid(4, node9).","node(node1).","node(node2).","node(node3).","node(node4).","node(node5).","node(node6).","node(node7).","node(node8).","node(node9).","nonterm(node1).","nonterm(node2).","nonterm(node3).","nonterm(node5).","nonterm(node7).","parent(node1, node2).","parent(node2, node3).","parent(node2, node5).","parent(node2, node9).","parent(node3, node4).","parent(node5, node6).","parent(node5, node7).","parent(node7, node8).","tdep(advmod, 2, 3).","tdep(none,none,none).","tdep(nsubj, 2, 1).","tdep(punct, 2, 4).","tdep(root, 0, 2).","terminal(node4).","terminal(node6).","terminal(node8).","terminal(node9).","text('.', node9).","text('She is here .', node1).","text('She is here .', node2).","text('She', node3).","text('She', node4).","text('here', node7).","text('here', node8).","text('is here', node5).","text('is', node6).","tknid(1, node4).","tknid(2, node6).","tknid(3, node8).","tknid(4, node9).","token('.', node9).","token('here', node8).","token('is', node6).","token('she', node4).","type('.', node9).","type('advp', node7).","type('np', node3).","type('prp', node4).","type('rb', node8).","type('root', node1).","type('s', node2).","type('vbz', node6).","type('vp', node5).","type(noun, X) :- type(nn, X); type(nns, X); type(nnp, X); type(nnps, X).","type(verb, X) :- type(vb, X); type(vbd, X); type(vbg, X); type(vbn, X); type(vbp, X); type(vbz, X).","type(adjective, X) :- type(jj, X); type(jjr, X); type(jjs, X).","type(adverb, X) :- type(rb, X); type(rbr, X); type(rbs, X).","type(clause, X) :- type(s, X); type(sinv, X); type(sq, X).","type(clausebar, X) :- type(sbar, X); type(sbarq, X).","type(clausemax, X) :- parent(Y, X), (type(clause, X), \\+(( type(clausebar, Y) )) ; type(clausebar, X)).","root_of(Root, Constituent) :- tknid(TY,Root), ancestor(Constituent,Root), tdep(_,TGov,TY), ftknid(FTkn,Constituent), ltknid(LTkn,Constituent), (TGov<FTkn;TGov>LTkn).","semroot(SemRoot, Clause) :- type(clausemax, Clause), root_of(SemRoot, Clause).","syn_sem_root(SynRoot, SemRoot) :- dep(cop, SemRoot, SynRoot); \\+dep(cop, SemRoot, SynRoot), SemRoot=SynRoot.","ancestry_line(A, B, C) :- ancestor(A, B), ancestor(B, C).","subj(Subj, ClauseMax) :- subj(Subj, _, ClauseMax).","subj(NP, N, S) :- type(clausemax, S), semroot(Root, S), \\+((ancestry_line(S, S1, Root), type(clausemax, S1) )), (dep(nsubj, Root, N); dep(nsubjpass, Root, N)), ancestor(NP, N), (type(np, NP); type(whnp, NP)), \\+((type(np, NP1), parent(NP1, NP))), \\+((ancestor(NP, S) )).","subj(CSubj, Root2, S) :- type(clausemax, S), semroot(Root, S), dep(csubj, Root, Root2), ancestry_line(S, CSubj, Root2), type(clausemax, CSubj), \\+(( type(clausemax, S2), ancestry_line(S, S2, CSubj) )), \\+((ancestor(CSubj, S) )).","pred(Pred, ClauseMax) :- pred(Pred, _, ClauseMax).","pred(Pred, Root, ClauseMax) :- type(clausemax, ClauseMax), semroot(Root, ClauseMax), type(vp, Pred), ancestor(Pred, Root), ancestor(ClauseMax, Pred), \\+(( type(vp, VP1), ancestry_line(ClauseMax, VP1, Pred) )).","subjpred(S, P, C) :- subj(S, C), pred(P, C).","immed_precedes(N1, N2) :- last_member(Node1, N1), first_member(Node2, N2), ltknid(Token1, Node1), ftknid(Token2, Node2), succ(Token1, Token2).","precedes(N1, N2) :- last_member(Node1, N1), first_member(Node2, N2), ltknid(Token1, Node1), ftknid(Token2, Node2), Token1 < Token2.","ancestor(A, B) :- depth(DA, A), depth(DB, B), DA<DB, ftknid(A0, A), ltknid(A1, A), ftknid(B0, B), \\+(( B0<A0; B0>A1 )).","sibling(A, B) :- parent(X, A), parent(X, B), dif(A, B).","subvp(X, Y) :- parent(Y, X), type(vp, X), type(vp, Y), sibling(Z, X), type(vp, Z).","minvp(X, Y) :- (X=Y, \\+(subvp(_,Y))); subvp(X,Y).","auxverb(AuxNode, Root) :- type(verb, Root), \\+(dep(cop, Root, _)), (dep(auxpass, Root, AuxNode); dep(aux, Root, AuxNode)).","auxverb(AuxNode, Root) :- dep(cop, SynRoot, Root), (dep(auxpass, SynRoot, AuxNode); dep(aux, SynRoot, AuxNode)).","fauxverb(AuxNode, Root) :- auxverb(AuxNode, Root), \\+((auxverb(Aux2, Root), precedes(AuxNode, Aux2))).","nauxverb(AuxNode, AuxNodePrev, Root) :- auxverb(AuxNode, Root), (auxverb(AuxNodePrev, Root); AuxNodePrev=Root), precedes(AuxNode, AuxNodePrev), \\+((auxverb(Aux2, Root), precedes(AuxNode, Aux2), precedes(Aux2, AuxNodePrev))).","finite(Finite) :- type(vbp, Finite); type(vbd, Finite); type(vbz, Finite); type(vbg, Finite); type(vbn, Finite); type(to, Finite); type(md, Finite); type(vb, Finite).","finite(Finite, SynRoot) :- finite(Finite), semroot(SemRoot, X), type(clausemax, X), type(verb, SynRoot), syn_sem_root(SynRoot, SemRoot), (auxverb(Finite, SynRoot), \\+((nauxverb(_, Finite, SynRoot))); Finite=SynRoot, \\+(auxverb(_, SynRoot))).","requires_base(X) :- token(does, X); token(do, X); token(did, X); type(to, X); type(md, X).","main_verb(R1, Clause) :- root_of(R, Clause), type(verb, R1), syn_sem_root(R1, R).","verbform(F, I, O, R) :- F=passive, I=R, nauxverb(O, I, R), lemma(be, O), type(vbn, I).","verbform(F, I, O, R) :- F=progressive, nauxverb(O, I, R), lemma(be, O), type(vbg, I).","verbform(F, I, O, R) :- F=present, O=none, finite(I, R), (type(vbz, I); type(vbp, I); type(vb, I)).","verbform(F, I, O, R) :- F=past, O=none, finite(I, R), (type(vbd, I)).","verbform(F, I, O, R) :- F=modal, O=none, finite(I, R), (type(md, I)).","verbform(F, I, O, R) :- F=participle, O=none, finite(I, R), (type(vbg, I); type(vbn, I)).","verbform(F, I, O, R) :- F=infinitive, O=none, finite(I, R), (type(to, I)).","verbform(F, I, O, R) :- F=base, (nauxverb(O, I, R), requires_base(O)), (type(vb, I); type(vbp, I)).","verbform(F, I, O, R) :- F=perfect, nauxverb(O, I, R), (lemma(have, O); token('\\'s', O); token('\\'d', O)), type(vbn, I).","verbform(F, I, O, R) :- F=future, verbform(modal, I, O, R), (lemma(will, I); lemma(shall, I); token('\\'ll', I)).","verbform(F, Clause) :- main_verb(R1, Clause), verbform(F, _, _, R1).","verbtoken(Tkn, Clause) :- main_verb(R1, Clause), token(Tkn, R1).","verbtype(Tkn, Clause) :- main_verb(R1, Clause), type(Tkn, R1).","phrasal_verb(Verb, Particle, X) :- lemma(Verb, X), lemma(Particle, Y), (dep(prep, X, Y); dep(prt, X, Y)).","is_active(X) :- type(verb, X), \\+verbform(passive, X, _, _).","first_member(X, L) :- \\+is_list(L), X=L; is_list(L), L = [X | _].","last_member(X, L) :- \\+is_list(L), X=L; is_list(L), append(_, [X], L).","main_predicate :- findall(X, target_predicate(X), L), write(L).","target_predicate([simple_past_form_error,'S',S,'VERB',VERB]) :- simple_past_form_error(S, VERB).","main_goal :- main_predicate,halt."]}]